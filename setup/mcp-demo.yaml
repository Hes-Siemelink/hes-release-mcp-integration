---
apiVersion: xl-release/v1
kind: Templates
metadata:
  home: MCP Demo
spec:

  # MCP Servers
  - name: Ticket MCP Server
    type: mcp.Server
    url: http://host.docker.internal:8080
    transport: sse

  - name: Agility MCP Server
    type: mcp.Server
    url: https://api.staging.digital.ai/agilitymcp/v1/mcp
    headers:
      X-Agility-Bearer: !value AGILITY_KEY
      X-Agility-Host: https://www7.v1host.com/V1Production

  - name: Release MCP Server
    type: mcp.Server
    url: http://host.docker.internal:8000/mcp

    # AI Models
  - name: Gemini 2.5 Pro
    type: ai.GeminiModel
    apiKey: !value GEMINI_API_KEY
    model_id: gemini-2.5-pro

  - name: Gemini 2.5 Flash
    type: ai.GeminiModel
    apiKey: !value GEMINI_API_KEY
    model_id: gemini-2.5-flash

  - name: Gemini 2.5 Flash-Lite
    type: ai.GeminiModel
    apiKey: !value GEMINI_API_KEY
    model_id: gemini-2.5-flash-lite

  - name: Amazon Nova Micro 1:0
    type: ai.OpenAiModel
    url: https://api.staging.digital.ai/llm
    apiKey: !value DAI_LLM_API_KEY
    model_id: amazon.nova-micro-v1:0

  # Demo Templates
  - template: MCP Ticket Sample
    phases:
      - phase: List tickets
        tasks:
          - name: Get tickets
            type: mcp.CallTool
            server: Ticket MCP Server
            tool: list_tickets
          - name: Get single ticket
            type: mcp.CallTool
            server: Ticket MCP Server
            tool: get_ticket
            input: |
              {"id": "TICKET-001"}
          - name: OK?
            type: xlrelease.GateTask

  - template: MCP Agility Sample
    phases:
      - phase: MCP
        tasks:
          - name: List Agility tools
            type: mcp.ListTools
            server: Agility MCP Server
          - name: Get current Agility user
            type: mcp.CallTool
            server: Agility MCP Server
            tool: get_current_user
          - name: OK?
            type: xlrelease.GateTask
            owner: admin

  - template: MCP Release Sample
    phases:
      - phase: List releases
        tasks:
          - name: List Release tools
            type: mcp.ListTools
            server: Release MCP Server
          - name: Get releases
            type: mcp.CallTool
            server: Release MCP Server
            tool: list_releases
            input: |
              {
                "request": {}
              }
          - name: OK?
            type: xlrelease.GateTask
            owner: admin

  - template: List tools
    phases:
      - phase: List tools
        tasks:
          - name: List Ticket tools
            type: mcp.ListTools
            server: Ticket MCP Server
          - name: List Release tools
            type: mcp.ListTools
            server: Release MCP Server
          - name: List Agility Tools
            type: mcp.ListTools
            server: Agility MCP Server
          - name: OK?
            type: xlrelease.GateTask
            owner: admin

  # Gemini prompt example

  - template: Gemini prompt
    phases:
      - phase: Prompt
        tasks:
          - name: Ask something
            type: ai.GeminiPrompt
            model: Gemini 2.5 Flash-Lite
            prompt: Say hello in five languages

  # Full example
  - template: Agility summarize user
    phases:
      - phase: User details
        tasks:
          - name: Get current Agility user
            type: mcp.CallTool
            variableMapping:
              result: "${user}"
            server: Agility MCP Server
            tool: get_current_user
          - name: Get name
            type: ai.GeminiPrompt
            variableMapping:
              response: "${name}"
            model: Gemini 2.5 Flash
            prompt: |-
              Extract the name from the following data. Give me only the full name as a result
              
              ```
              ${user}
              ```
          - name: Get summary
            type: ai.GeminiPrompt
            variableMapping:
              response: "${summary}"
            model: Gemini 2.5 Flash
            prompt: |-
              Please create a nice summary of the following data
              
              ```
              ${user}
              ```
          - name: Summary for ${name}
            type: xlrelease.Task
            description: ${summary}
    variables:
      - type: xlrelease.StringVariable
        key: user
        requiresValue: false
        showOnReleaseStart: false
        label: User info
        description: JSON info of user
      - type: xlrelease.StringVariable
        key: summary
        requiresValue: false
        showOnReleaseStart: false
        label: User summary
        description: The response from Google Gemini
      - type: xlrelease.StringVariable
        key: name
        requiresValue: false
        showOnReleaseStart: false
        label: User name
        description: Subject of the message.

  # Langchain example

  - template: Release Agent demo
    phases:
      - phase: Report
        tasks:
          - name: Fix last failed release
            type: ai.AgentPrompt
            prompt: |
              Find the root cause of the last failed release and created a ticket to solve it
            model: Gemini 2.5 Flash
            mcpServer1: Release MCP Server
            mcpServer2: Ticket MCP Server
          - name: OK?
            type: xlrelease.GateTask
            owner: admin

  - template: Reorder tickets
    phases:
      - phase: Reorder backlog
        tasks:
          - name: Get tickets
            type: mcp.CallTool
            result: ${unordered}
            server: Ticket MCP Server
            tool: list_tickets
          - name: Reorder by priority
            type: ai.AgentPrompt
            prompt: Find the highest priority tickets and move them to the  top of the backlog
            model: Gemini 2.5 Pro
            mcpServer1: Ticket MCP Server
          - name: Get tickets again
            type: mcp.CallTool
            result: ${ordered}
            server: Ticket MCP Server
            tool: list_tickets
          - name: OK?
            type: xlrelease.GateTask
            description: |-
              ## Old order
              
              ```
              ${unordered}
              ```
              
              ## New order
              
              ```
              ${ordered}
              ```
    variables:
      - type: xlrelease.StringVariable
        key: unordered
        requiresValue: false
        showOnReleaseStart: false
        label: Result
        description: Result
      - type: xlrelease.StringVariable
        key: ordered
        requiresValue: false
        showOnReleaseStart: false
        label: Result
        description: Result
